# Docker Compose para servicios backend de Opalo
# Sin puertos publicos; se accede vía Nginx Proxy Manager

name: opalo_stack

networks:
  Opalo_network:
    name: Opalo_network
    driver: bridge

volumes:
  mariadb_data:
  grafana_data:
  nodered_data:
  portainer_data:
  npm_data:
  npm_letsencrypt:
  influxdb_data:

services:
  mariadb:
    image: mariadb:11.4
    container_name: mariadb
    restart: unless-stopped
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
      - MARIADB_USER=${MARIADB_USER}
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}
      - TZ=${TZ}
    command: ["--character-set-server=utf8mb4","--collation-server=utf8mb4_unicode_ci"]
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - Opalo_network
    healthcheck:
      test: ["CMD-SHELL", "mariadb-admin ping -u root -p$${MARIADB_ROOT_PASSWORD} || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_RETENTION=${INFLUXDB_RETENTION}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - Opalo_network
    healthcheck:
      test: ["CMD", "influx", "ping", "--host", "http://localhost:8086"]
      interval: 15s
      timeout: 5s
      retries: 10

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_DOMAIN=grafana.${BASE_DOMAIN}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/
      - TZ=${TZ}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - Opalo_network
    depends_on:
      - mariadb
      - influxdb

  nodered:
    image: nodered/node-red:latest
    container_name: nodered
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    volumes:
      - nodered_data:/data
    networks:
      - Opalo_network

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    # No exponemos 9443 al host; acceso por NPM con subdominio
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - Opalo_network

  npm:  # Nginx Proxy Manager
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx_proxy_manager
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - Opalo_network
    depends_on:
      - mariadb
      - grafana
      - nodered
      - portainer
      - influxdb
      - adminer
      - remix
      - ganache

  adminer:  # GUI web para administrar MariaDB
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    depends_on:
      - mariadb
    networks:
      - Opalo_network

  remix:  # Remix IDE (web)
    image: remixproject/remix-ide:latest
    container_name: remix
    restart: unless-stopped
    environment:
      - TZ=${TZ}
    networks:
      - Opalo_network
    # Sin puertos al host; publicar por NPM (remix.${BASE_DOMAIN} → http://remix:80)

  ganache:
    image: trufflesuite/ganache:latest
    container_name: ganache
    restart: unless-stopped
    command:
      [
        "--mnemonic", "${GANACHE_MNEMONIC}",
        "--defaultBalanceEther", "${GANACHE_DEFAULT_BALANCE}",
        "--networkId", "${GANACHE_NETWORK_ID}",
        "--host", "0.0.0.0",
        "--port", "8545"
      ]
    environment:
      - TZ=${TZ}
    networks:
      - Opalo_network

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    command: tunnel --no-autoupdate run
    networks:
      - Opalo_network

  # === Plantilla para APIs a futuro ===
  # api_app:
  #   build: ./api_app  # o image: imagen:tag
  #   container_name: api_app
  #   restart: unless-stopped
  #   environment:
  #     - TZ=${TZ}
  #     - DATABASE_HOST=mariadb
  #     - DATABASE_USER=${MARIADB_USER}
  #     - DATABASE_PASSWORD=${MARIADB_PASSWORD}
  #     - DATABASE_NAME=${MARIADB_DATABASE}
  #   networks:
  #     - Opalo_network
  #   depends_on:
  #     - mariadb
  #   # sin puertos; se publica por NPM (proxy host apuntando a http://api_app:PUERTO)
