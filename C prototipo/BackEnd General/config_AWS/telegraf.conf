# Configuración Telegraf para GASLYT en AWS
# Recepción de datos desde AWS IoT Core y envío a InfluxDB y MariaDB

[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""
  hostname = "telegraf-gaslyt-aws"
  omit_hostname = false

# Input AWS IoT Core Consumer para recepción de datos GASLYT
[[inputs.mqtt_consumer]]
  servers = ["ssl://$AWS_IOT_ENDPOINT:8883"]
  topics = [
    "gaslyt/+/lecturas",
    "gaslyt/+/alarmas", 
    "gaslyt/+/metadata",
    "gaslyt/+/actualizaciones/estado",
    "gaslyt/+/actualizaciones/progreso"
  ]
  topic_tag = "topic"
  qos = 0
  connection_timeout = "30s"
  max_undelivered_messages = 1000
  persistent_session = false
  client_id = "telegraf-gaslyt-aws"
  data_format = "json"
  json_string_fields = ["fecha", "tipo", "unidad", "severidad", "accion", "idDispositivo", "mac", "version", "brokerMQTT", "ip", "descripcion", "mensaje", "dispositivo"]
  json_name_key = "idDispositivo"
  tag_keys = ["idDispositivo", "tipo", "unidad", "severidad"]
  
  # Configuración SSL para AWS IoT Core
  ssl_ca = "/etc/ssl/certs/AmazonRootCA1.pem"
  ssl_cert = "/etc/ssl/certs/device-certificate.pem.crt"
  ssl_key = "/etc/ssl/private/private.pem.key"
  insecure_skip_verify = false

# Input CloudWatch para métricas AWS
[[inputs.cloudwatch]]
  region = "$AWS_REGION"
  access_key = "$AWS_ACCESS_KEY_ID"
  secret_key = "$AWS_SECRET_ACCESS_KEY"
  
  # Métricas de EC2
  [[inputs.cloudwatch.metrics]]
    namespaces = ["AWS/EC2"]
    metric_name_include = ["CPUUtilization", "NetworkIn", "NetworkOut", "DiskReadOps", "DiskWriteOps"]
    dimensions = ["InstanceId"]
    period = "1m"
    interval = "5m"

# Output InfluxDB para series temporales
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "$INFLUXDB_ADMIN_TOKEN"
  organization = "$INFLUXDB_ORG"
  bucket = "$INFLUXDB_BUCKET"
  measurement = "gaslyt_measurements"

# Output MySQL/MariaDB para datos relacionales
[[outputs.mysql]]
  dsn = "$MARIADB_USER:$MARIADB_PASSWORD@tcp(mariadb:3306)/$MARIADB_DATABASE"
  metric_separator = "_"
  table_template = "gaslyt_{{.Name}}"
  tag_table = "gaslyt_tags"
  field_table = "gaslyt_fields"
  timestamp_column = "timestamp"
  tag_columns = ["idDispositivo", "tipo", "unidad", "severidad", "accion"]
  field_columns = ["concentracion", "umbral", "alarma", "rssi", "uptime", "estadoWifi", "estadoMQTT", "estadoAlarma", "ultimaLectura", "progreso"]

# Output CloudWatch para métricas personalizadas
[[outputs.cloudwatch]]
  region = "$AWS_REGION"
  access_key = "$AWS_ACCESS_KEY_ID"
  secret_key = "$AWS_SECRET_ACCESS_KEY"
  namespace = "GASLYT/CustomMetrics"
  
  # Enviar métricas de dispositivos a CloudWatch
  [[outputs.cloudwatch.metrics]]
    namepass = ["mqtt_consumer"]
    metric_name = "DeviceAlarms"
    value_key = "alarma"
    tag_key = "idDispositivo"

# Procesador para separar datos según tipo
[[processors.regex]]
  namepass = ["mqtt_consumer"]
  [[processors.regex.tags]]
    key = "topic"
    pattern = "gaslyt/.*/(lecturas|alarmas|metadata|actualizaciones/estado|actualizaciones/progreso)"
    replacement = "${1}"

# Procesador para enriquecer datos con información del dispositivo
[[processors.starlark]]
  namepass = ["mqtt_consumer"]
  source = '''
def apply(metric):
    # Extraer ID del dispositivo del topic
    topic = metric.tags.get("topic", "")
    if "/" in topic:
        parts = topic.split("/")
        if len(parts) >= 2:
            device_id = parts[1]  # gaslyt/DEVICE_ID/lecturas
            metric.tags["device_id"] = device_id
    
    # Clasificar tipo de medición
    if "lecturas" in topic:
        metric.tags["measurement_type"] = "sensor_reading"
    elif "alarmas" in topic:
        metric.tags["measurement_type"] = "alarm"
    elif "metadata" in topic:
        metric.tags["measurement_type"] = "device_metadata"
    elif "actualizaciones" in topic:
        metric.tags["measurement_type"] = "update_status"
    
    # Agregar información de AWS
    metric.tags["aws_region"] = "us-east-1"  # o la región que uses
    metric.tags["aws_service"] = "iot_core"
    
    return metric
'''

# Filtros para enviar datos específicos a cada base de datos
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "$INFLUXDB_ADMIN_TOKEN"
  organization = "$INFLUXDB_ORG"
  bucket = "$INFLUXDB_BUCKET"
  namepass = ["mqtt_consumer"]
  tagpass = {
    measurement_type = ["sensor_reading", "alarm", "device_metadata"]
  }

[[outputs.mysql]]
  dsn = "$MARIADB_USER:$MARIADB_PASSWORD@tcp(mariadb:3306)/$MARIADB_DATABASE"
  namepass = ["mqtt_consumer"]
  tagpass = {
    measurement_type = ["update_status"]
  }

# Procesador para agregar timestamps AWS
[[processors.timestamp]]
  namepass = ["mqtt_consumer"]
  result_tag = "aws_timestamp"
  format = "unix"
  precision = "ns"
